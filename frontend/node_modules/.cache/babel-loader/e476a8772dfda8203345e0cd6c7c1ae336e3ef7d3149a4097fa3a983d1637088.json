{"ast":null,"code":"import { jsPDF } from \"jspdf\";\nimport axios from \"axios\";\nexport const generatePatientPDF = async patientId => {\n  try {\n    if (!patientId) {\n      throw new Error(\"Please enter a valid Patient ID.\");\n    }\n    console.log(\"Fetching Data for Patient ID:\", patientId);\n    // ✅ Fetch patient data using `patientId`, not `_id`\n    const response = await axios.get(`http://localhost:5000/api/patients?patientId=${patientId}`);\n    const patients = response.data[0];\n    if (!patients || patients.length === 0) {\n      throw new Error(\"Patient data not found.\");\n    }\n    const patient = patients[0]; // ✅ Assuming API returns an array\n\n    console.log(\"Fetched Patient Data:\", patient);\n    const doc = new jsPDF();\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(16);\n    doc.text(\"Patient Report\", 20, 20);\n    doc.setFont(\"helvetica\", \"normal\");\n    doc.setFontSize(12);\n    doc.text(`Patient ID: ${patient.patientId}`, 20, 40);\n    doc.text(`Name: ${patient.firstName} ${patient.lastName}`, 20, 50);\n    doc.text(`DOB: ${new Date(patient.dob).toLocaleDateString()}`, 20, 60);\n    doc.text(`Gender: ${patient.gender}`, 20, 70);\n    doc.text(`Phone: ${patient.phone}`, 20, 80);\n    doc.text(`Email: ${patient.email}`, 20, 90);\n    doc.text(`Address: ${patient.address || \"N/A\"}`, 20, 100);\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(14);\n    doc.text(\"Prescriptions:\", 20, 120);\n    doc.setFont(\"helvetica\", \"normal\");\n    patient.prescriptions.forEach((prescription, index) => {\n      doc.text(`${index + 1}. ${prescription}`, 20, 130 + index * 10);\n    });\n    doc.setFont(\"helvetica\", \"bold\");\n    doc.setFontSize(14);\n    doc.text(\"Visits:\", 20, 150 + patient.prescriptions.length * 10);\n    doc.setFont(\"helvetica\", \"normal\");\n    patient.visits.forEach((visit, index) => {\n      doc.text(`${index + 1}. ${visit}`, 20, 160 + index * 10 + patient.prescriptions.length * 10);\n    });\n    doc.save(`${patient.firstName}_${patient.lastName}_PatientReport.pdf`);\n    alert(\"Patient data exported successfully!\");\n  } catch (error) {\n    console.error(\"Error generating PDF:\", error);\n    alert(error.message || \"Failed to export patient data.\");\n  }\n};","map":{"version":3,"names":["jsPDF","axios","generatePatientPDF","patientId","Error","console","log","response","get","patients","data","length","patient","doc","setFont","setFontSize","text","firstName","lastName","Date","dob","toLocaleDateString","gender","phone","email","address","prescriptions","forEach","prescription","index","visits","visit","save","alert","error","message"],"sources":["C:/Users/Meher/OneDrive/Desktop/CareTrack/frontend/src/utils/pdfUtils.js"],"sourcesContent":["import { jsPDF } from \"jspdf\";\r\nimport axios from \"axios\";\r\n\r\nexport const generatePatientPDF = async (patientId) => {\r\n  try {\r\n    if (!patientId) {\r\n      throw new Error(\"Please enter a valid Patient ID.\");\r\n    }\r\n    console.log(\"Fetching Data for Patient ID:\", patientId);\r\n    // ✅ Fetch patient data using `patientId`, not `_id`\r\n    const response = await axios.get(`http://localhost:5000/api/patients?patientId=${patientId}`);\r\n    const patients = response.data[0];\r\n\r\n    if (!patients || patients.length === 0) {\r\n      throw new Error(\"Patient data not found.\");\r\n    }\r\n\r\n    const patient = patients[0]; // ✅ Assuming API returns an array\r\n\r\n    console.log(\"Fetched Patient Data:\", patient);\r\n\r\n    const doc = new jsPDF();\r\n    doc.setFont(\"helvetica\", \"bold\");\r\n    doc.setFontSize(16);\r\n    doc.text(\"Patient Report\", 20, 20);\r\n\r\n    doc.setFont(\"helvetica\", \"normal\");\r\n    doc.setFontSize(12);\r\n    doc.text(`Patient ID: ${patient.patientId}`, 20, 40);\r\n    doc.text(`Name: ${patient.firstName} ${patient.lastName}`, 20, 50);\r\n    doc.text(`DOB: ${new Date(patient.dob).toLocaleDateString()}`, 20, 60);\r\n    doc.text(`Gender: ${patient.gender}`, 20, 70);\r\n    doc.text(`Phone: ${patient.phone}`, 20, 80);\r\n    doc.text(`Email: ${patient.email}`, 20, 90);\r\n    doc.text(`Address: ${patient.address || \"N/A\"}`, 20, 100);\r\n\r\n    doc.setFont(\"helvetica\", \"bold\");\r\n    doc.setFontSize(14);\r\n    doc.text(\"Prescriptions:\", 20, 120);\r\n    doc.setFont(\"helvetica\", \"normal\");\r\n    patient.prescriptions.forEach((prescription, index) => {\r\n      doc.text(`${index + 1}. ${prescription}`, 20, 130 + index * 10);\r\n    });\r\n\r\n    doc.setFont(\"helvetica\", \"bold\");\r\n    doc.setFontSize(14);\r\n    doc.text(\"Visits:\", 20, 150 + patient.prescriptions.length * 10);\r\n    doc.setFont(\"helvetica\", \"normal\");\r\n    patient.visits.forEach((visit, index) => {\r\n      doc.text(`${index + 1}. ${visit}`, 20, 160 + index * 10 + patient.prescriptions.length * 10);\r\n    });\r\n\r\n    doc.save(`${patient.firstName}_${patient.lastName}_PatientReport.pdf`);\r\n    alert(\"Patient data exported successfully!\");\r\n  } catch (error) {\r\n    console.error(\"Error generating PDF:\", error);\r\n    alert(error.message || \"Failed to export patient data.\");\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}